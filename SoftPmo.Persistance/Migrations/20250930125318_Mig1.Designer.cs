// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftPmo.Persistance.Context;

#nullable disable

namespace SoftPmo.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250930125318_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActivityStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalNotes")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerLocationId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("TaskStepId")
                        .HasColumnType("text");

                    b.Property<int>("TotalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStepId");

                    b.HasIndex("UserId", "ActivityDate");

                    b.ToTable("ACTIVITY_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ACTIVITY_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationTypeId1")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId1");

                    b.HasIndex("UserId1");

                    b.ToTable("NOTIFICATION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.NotificationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendPush")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NOTIFICATION_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceException", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("AttendanceExceptionTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExceptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int?>("MinutesToDeduct")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("AttendanceExceptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ATTENDANCE_EXCEPTION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceExceptionType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeductible")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ATTENDANCE_EXCEPTION_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int>("FlexibilityMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxSessionHours")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RequiredMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresBothCheckInOut")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ATTENDANCE_RULE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CheckInLocationId")
                        .HasColumnType("text");

                    b.Property<string>("CheckInQRToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckOutLocationId")
                        .HasColumnType("text");

                    b.Property<string>("CheckOutQRToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CheckInLocationId");

                    b.HasIndex("CheckOutLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId", "SessionDate");

                    b.ToTable("ATTENDANCE_SESSION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.QRToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TokenType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UsedByUserId");

                    b.ToTable("QR_TOKEN", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.UserAttendanceRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttendanceRuleId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRuleId");

                    b.HasIndex("UserId");

                    b.ToTable("USER_ATTENDANCE_RULE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationTypeId1")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationTypeId1");

                    b.ToTable("CUSTOMER_LOCATION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("AutoRenewMaintenance")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("HasMaintenanceContract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MaintenanceEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("MaintenanceStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MonthlyMaintenanceFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactName")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalContactName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Dashboard.DashboardWidget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationJson")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSource")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManagerOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("RefreshIntervalSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredRole")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WidgetType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DASHBOARD_WIDGET", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Dashboard.UserDashboardWidget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomTitle")
                        .HasColumnType("text");

                    b.Property<int>("DashboardWidgetId")
                        .HasColumnType("integer");

                    b.Property<string>("DashboardWidgetId1")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("PersonalConfigurationJson")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DashboardWidgetId1");

                    b.HasIndex("UserId1");

                    b.ToTable("USER_DASHBOARD_WIDGET", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DirectManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PositionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectManagerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("PositionId");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnchorText")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<int?>("CharacterPosition")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("NotePageId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("ResolvedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("NotePageId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ResolvedByUserId");

                    b.ToTable("NOTE_COMMENT", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ContentWordCount")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("NotebookSectionId")
                        .HasColumnType("text");

                    b.Property<string>("RelatedCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("RelatedProjectId")
                        .HasColumnType("text");

                    b.Property<string>("RelatedTaskId")
                        .HasColumnType("text");

                    b.Property<string>("SearchableContent")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("RelatedCustomerId");

                    b.HasIndex("RelatedProjectId");

                    b.HasIndex("RelatedTaskId");

                    b.HasIndex("NotebookSectionId", "SortOrder");

                    b.ToTable("NOTE_PAGE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePageAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmbedded")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkTitle")
                        .HasColumnType("text");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("text");

                    b.Property<string>("NotePageId")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NotePageId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("NOTE_PAGE_ATTACHMENT", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePageTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NotePageId")
                        .HasColumnType("text");

                    b.Property<string>("NoteTagId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("NoteTagId");

                    b.HasIndex("NotePageId", "NoteTagId")
                        .IsUnique();

                    b.ToTable("NOTE_PAGE_TAG", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePermissionType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultCanAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultCanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultCanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultCanShare")
                        .HasColumnType("boolean");

                    b.Property<bool>("DefaultCanWrite")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NOTE_PERMISSION_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemTag")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId1");

                    b.ToTable("NOTE_TAG", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.Notebook", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamNotebook")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerId1")
                        .HasColumnType("text");

                    b.Property<int?>("RelatedCustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedCustomerId1")
                        .HasColumnType("text");

                    b.Property<int?>("RelatedProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedProjectId1")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalPages")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSections")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId1");

                    b.HasIndex("RelatedCustomerId1");

                    b.HasIndex("RelatedProjectId1");

                    b.ToTable("NOTEBOOK", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotebookPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanShare")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrantedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NotebookId")
                        .HasColumnType("text");

                    b.Property<string>("PermissionTypeId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GrantedByUserId");

                    b.HasIndex("NotebookId");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("NOTEBOOK_PERMISSION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotebookSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotebookId")
                        .HasColumnType("integer");

                    b.Property<string>("NotebookId1")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalPages")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId1");

                    b.ToTable("NOTEBOOK_SECTION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<string>("PriorityId1")
                        .HasColumnType("text");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectManagerId1")
                        .HasColumnType("text");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectStatusId1")
                        .HasColumnType("text");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectTypeId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("PriorityId1");

                    b.HasIndex("ProjectManagerId1");

                    b.HasIndex("ProjectStatusId1");

                    b.HasIndex("ProjectTypeId1");

                    b.ToTable("PROJECT_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanApproveActivities")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAssignTasks")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_ROLE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectTeamMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectId1")
                        .HasColumnType("text");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectRoleId1")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("ProjectRoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("PROJECT_TEAM_MEMBER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultDurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultTaskTypes")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.AttendanceSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AbsentDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("AttendanceRate")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("AverageArrivalTime")
                        .HasColumnType("interval");

                    b.Property<int>("AverageDailyMinutes")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("AverageDepartureTime")
                        .HasColumnType("interval");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EarlyLeaveDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastCalculated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LateDays")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("OfficialHolidayDays")
                        .HasColumnType("integer");

                    b.Property<int>("OvertimeMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("PresentDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("PunctualityRate")
                        .HasColumnType("numeric");

                    b.Property<int>("RequiredWorkedMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("SickDays")
                        .HasColumnType("integer");

                    b.Property<int>("TotalWorkedMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("TotalWorkingDays")
                        .HasColumnType("integer");

                    b.Property<int>("UndertimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VacationDays")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ATTENDANCE_SUMMARY", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.DailyAttendanceReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttendanceStatus")
                        .HasColumnType("text");

                    b.Property<string>("CheckInLocationName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckOutLocationName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<int>("EarlyLeaveMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEarlyLeave")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<int>("LateMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("OvertimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequiredMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("UndertimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("WorkedMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DAILY_ATTENDANCE_REPORT", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.LiveAttendanceStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentLocationName")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("CurrentSessionDuration")
                        .HasColumnType("interval");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCurrentlyIn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateToday")
                        .HasColumnType("boolean");

                    b.Property<string>("LastActivityDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastCheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LateMinutesToday")
                        .HasColumnType("integer");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("StatusColor")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TodayFirstCheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TodayLastCheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TodayStatus")
                        .HasColumnType("text");

                    b.Property<int>("TodayTotalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LIVE_ATTENDANCE_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.CodeTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeFormat")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<int>("SequenceLength")
                        .HasColumnType("integer");

                    b.Property<int>("StartingNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseYear")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CODE_TEMPLATE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ParentDepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("LOCATION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.LocationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowRemoteWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LOCATION_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentId1")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PositionLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("PositionLevelId1")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("PositionLevelId1");

                    b.ToTable("POSITION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.PositionLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DefaultBillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("POSITION_LEVEL", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.SystemParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<string>("ParameterName")
                        .HasColumnType("text");

                    b.Property<string>("ParameterType")
                        .HasColumnType("text");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_PARAMETER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Priority", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeadlineWarningHours")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PRIORITY", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Step", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanRunParallel")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MainResponsibleUserId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("TotalBillingDays")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalEstimatedDays")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MainResponsibleUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("CustomerId", "ProjectId");

                    b.ToTable("TASK_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TaskStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskStatusTypeId1")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TaskStatusTypeId1");

                    b.ToTable("TASK_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TASK_STATUS_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedUserId1")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingDurationDays")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentId1")
                        .HasColumnType("text");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<string>("StepId1")
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskId1")
                        .HasColumnType("text");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskStatusId1")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId1");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("StepId1");

                    b.HasIndex("TaskId1");

                    b.HasIndex("TaskStatusId1");

                    b.ToTable("TASK_STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompletedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ParentTodoItemId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("ParentTodoItemId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskId", "SortOrder");

                    b.ToTable("TASK_TODO_ITEM", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultEstimatedDays")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresDeployment")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresTesting")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TASK_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTypeStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultDepartmentId")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDepartmentId");

                    b.HasIndex("StepId");

                    b.HasIndex("TaskTypeId", "SortOrder");

                    b.ToTable("TASK_TYPE_STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Activity.ActivityStatus", "ActivityStatus")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Activities")
                        .HasForeignKey("CustomerLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.System.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("Activities")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStep", "TaskStep")
                        .WithMany("Activities")
                        .HasForeignKey("TaskStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActivityStatus");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Location");

                    b.Navigation("Task");

                    b.Navigation("TaskStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.Notification", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Activity.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId1");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceException", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Attendance.AttendanceExceptionType", "AttendanceExceptionType")
                        .WithMany("AttendanceExceptions")
                        .HasForeignKey("AttendanceExceptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("AttendanceExceptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("AttendanceExceptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceSession", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Location", "CheckInLocation")
                        .WithMany()
                        .HasForeignKey("CheckInLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.System.Location", "CheckOutLocation")
                        .WithMany()
                        .HasForeignKey("CheckOutLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.System.Location", null)
                        .WithMany("CheckInSessions")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("AttendanceSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CheckInLocation");

                    b.Navigation("CheckOutLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.QRToken", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Location", "Location")
                        .WithMany("QRTokens")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "UsedByUser")
                        .WithMany()
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.UserAttendanceRule", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Attendance.AttendanceRule", "AttendanceRule")
                        .WithMany("UserAttendanceRules")
                        .HasForeignKey("AttendanceRuleId");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("UserAttendanceRules")
                        .HasForeignKey("UserId");

                    b.Navigation("AttendanceRule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("SoftPmo.Domain.Entities.System.Location", null)
                        .WithMany("CustomerLocations")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.System.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId1");

                    b.Navigation("Customer");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Dashboard.UserDashboardWidget", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Dashboard.DashboardWidget", "DashboardWidget")
                        .WithMany("UserDashboardWidgets")
                        .HasForeignKey("DashboardWidgetId1");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("UserDashboardWidgets")
                        .HasForeignKey("UserId1");

                    b.Navigation("DashboardWidget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "DirectManager")
                        .WithMany("Subordinates")
                        .HasForeignKey("DirectManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.System.Location", null)
                        .WithMany("Users")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.System.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("DirectManager");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteComment", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "Author")
                        .WithMany("AuthoredComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NotePage", "NotePage")
                        .WithMany("Comments")
                        .HasForeignKey("NotePageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NoteComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ResolvedByUser")
                        .WithMany()
                        .HasForeignKey("ResolvedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("NotePage");

                    b.Navigation("ParentComment");

                    b.Navigation("ResolvedByUser");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePage", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CreatedByUser")
                        .WithMany("CreatedPages")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NotebookSection", "NotebookSection")
                        .WithMany("Pages")
                        .HasForeignKey("NotebookSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "RelatedCustomer")
                        .WithMany()
                        .HasForeignKey("RelatedCustomerId");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "RelatedProject")
                        .WithMany()
                        .HasForeignKey("RelatedProjectId");

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "RelatedTask")
                        .WithMany("RelatedNotePages")
                        .HasForeignKey("RelatedTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("NotebookSection");

                    b.Navigation("RelatedCustomer");

                    b.Navigation("RelatedProject");

                    b.Navigation("RelatedTask");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePageAttachment", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Notes.NotePage", "NotePage")
                        .WithMany("Attachments")
                        .HasForeignKey("NotePageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NotePage");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePageTag", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NotePage", "NotePage")
                        .WithMany("NotePageTags")
                        .HasForeignKey("NotePageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NoteTag", "NoteTag")
                        .WithMany("NotePageTags")
                        .HasForeignKey("NoteTagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddedByUser");

                    b.Navigation("NotePage");

                    b.Navigation("NoteTag");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteTag", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CreatedByUser")
                        .WithMany("CreatedTags")
                        .HasForeignKey("CreatedByUserId1");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.Notebook", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "Owner")
                        .WithMany("OwnedNotebooks")
                        .HasForeignKey("OwnerId1");

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "RelatedCustomer")
                        .WithMany("RelatedNotebooks")
                        .HasForeignKey("RelatedCustomerId1");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "RelatedProject")
                        .WithMany("RelatedNotebooks")
                        .HasForeignKey("RelatedProjectId1");

                    b.Navigation("Owner");

                    b.Navigation("RelatedCustomer");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotebookPermission", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.Notebook", "Notebook")
                        .WithMany("Permissions")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Notes.NotePermissionType", "PermissionType")
                        .WithMany("NotebookPermissions")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("NotebookPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GrantedByUser");

                    b.Navigation("Notebook");

                    b.Navigation("PermissionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotebookSection", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Notes.Notebook", "Notebook")
                        .WithMany("Sections")
                        .HasForeignKey("NotebookId1");

                    b.Navigation("Notebook");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId1");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ProjectManager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ProjectManagerId1");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId1");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId1");

                    b.Navigation("Customer");

                    b.Navigation("Priority");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectTeamMember", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectRole", "ProjectRole")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectRoleId1");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId1");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.AttendanceSummary", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("AttendanceSummaries")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.DailyAttendanceReport", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("DailyAttendanceReports")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Reporting.LiveAttendanceStatus", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Department", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.System.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Location", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Position", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("SoftPmo.Domain.Entities.System.PositionLevel", "PositionLevel")
                        .WithMany("Positions")
                        .HasForeignKey("PositionLevelId1");

                    b.Navigation("Department");

                    b.Navigation("PositionLevel");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CreatedByUser")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "MainResponsibleUser")
                        .WithMany("MainResponsibleTasks")
                        .HasForeignKey("MainResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("MainResponsibleUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatusType", "TaskStatusType")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("TaskStatusTypeId1");

                    b.Navigation("TaskStatusType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "AssignedUser")
                        .WithMany("AssignedTaskSteps")
                        .HasForeignKey("AssignedUserId1");

                    b.HasOne("SoftPmo.Domain.Entities.System.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("SoftPmo.Domain.Entities.Task.Step", "Step")
                        .WithMany("TaskSteps")
                        .HasForeignKey("StepId1");

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskId1");

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskStatusId1");

                    b.Navigation("AssignedUser");

                    b.Navigation("Department");

                    b.Navigation("Step");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskTodoItem", "ParentTodoItem")
                        .WithMany("SubTodoItems")
                        .HasForeignKey("ParentTodoItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany("TodoItems")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("TodoItems")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedUser");

                    b.Navigation("CompletedByUser");

                    b.Navigation("ParentTodoItem");

                    b.Navigation("Priority");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTypeStep", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.System.Department", "DefaultDepartment")
                        .WithMany()
                        .HasForeignKey("DefaultDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Step", "Step")
                        .WithMany("TaskTypeSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany("TaskTypeSteps")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultDepartment");

                    b.Navigation("Step");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityStatus", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceExceptionType", b =>
                {
                    b.Navigation("AttendanceExceptions");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceRule", b =>
                {
                    b.Navigation("UserAttendanceRules");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerM", b =>
                {
                    b.Navigation("CustomerLocations");

                    b.Navigation("Projects");

                    b.Navigation("RelatedNotebooks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Dashboard.DashboardWidget", b =>
                {
                    b.Navigation("UserDashboardWidgets");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AssignedTaskSteps");

                    b.Navigation("AttendanceExceptions");

                    b.Navigation("AttendanceSessions");

                    b.Navigation("AttendanceSummaries");

                    b.Navigation("AuthoredComments");

                    b.Navigation("CreatedPages");

                    b.Navigation("CreatedTags");

                    b.Navigation("CreatedTasks");

                    b.Navigation("DailyAttendanceReports");

                    b.Navigation("MainResponsibleTasks");

                    b.Navigation("ManagedProjects");

                    b.Navigation("NotebookPermissions");

                    b.Navigation("OwnedNotebooks");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("Subordinates");

                    b.Navigation("UserAttendanceRules");

                    b.Navigation("UserDashboardWidgets");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("NotePageTags");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotePermissionType", b =>
                {
                    b.Navigation("NotebookPermissions");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NoteTag", b =>
                {
                    b.Navigation("NotePageTags");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.Notebook", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notes.NotebookSection", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.Navigation("RelatedNotebooks");

                    b.Navigation("Tasks");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectRole", b =>
                {
                    b.Navigation("ProjectTeamMembers");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Department", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("SubDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Location", b =>
                {
                    b.Navigation("CheckInSessions");

                    b.Navigation("CustomerLocations");

                    b.Navigation("QRTokens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.System.PositionLevel", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Priority", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Step", b =>
                {
                    b.Navigation("TaskSteps");

                    b.Navigation("TaskTypeSteps");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("RelatedNotePages");

                    b.Navigation("TaskSteps");

                    b.Navigation("TodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Navigation("TaskSteps");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatusType", b =>
                {
                    b.Navigation("TaskStatuses");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.Navigation("SubTodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskType", b =>
                {
                    b.Navigation("TaskTypeSteps");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
