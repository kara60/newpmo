// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftPmo.Persistance.Context;

#nullable disable

namespace SoftPmo.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActivityStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalNotes")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerLocationId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("TaskStepId")
                        .HasColumnType("text");

                    b.Property<int>("TotalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStepId");

                    b.HasIndex("UserId", "ActivityDate");

                    b.ToTable("ACTIVITY_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ACTIVITY_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CheckInLocationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckOutLocationId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CheckInLocationId");

                    b.HasIndex("CheckOutLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId", "SessionDate");

                    b.ToTable("ATTENDANCE_SESSION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("LocationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("CUSTOMER_LOCATION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("AutoRenewMaintenance")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("HasMaintenanceContract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MaintenanceEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("MaintenanceStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MonthlyMaintenanceFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactName")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalContactName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DirectManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PositionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectManagerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("PositionId");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notification.NotificationM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RelatedEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NOTIFICATION_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectManagerId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectTypeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("PROJECT_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanApproveActivities")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAssignTasks")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_ROLE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectTeamMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectRoleId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PROJECT_TEAM_MEMBER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultDurationDays")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultTaskTypes")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PROJECT_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.CodeTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeFormat")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<int>("SequenceLength")
                        .HasColumnType("integer");

                    b.Property<int>("StartingNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseYear")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EntityType");

                    b.ToTable("CODE_TEMPLATE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ParentDepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.ErrorLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("text");

                    b.Property<string>("RequestPath")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ERROR_LOG", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQREnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("LOCATION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.LocationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowRemoteWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LOCATION_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PositionLevelId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionLevelId");

                    b.ToTable("POSITION", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.PositionLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DefaultBillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("POSITION_LEVEL", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.SystemParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<string>("ParameterName")
                        .HasColumnType("text");

                    b.Property<string>("ParameterType")
                        .HasColumnType("text");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_PARAMETER", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Priority", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeadlineWarningHours")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PRIORITY", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Step", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanRunParallel")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MainResponsibleUserId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("TotalBillingDays")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalEstimatedDays")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MainResponsibleUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("CustomerId", "ProjectId");

                    b.ToTable("TASK_M", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TaskStatusTypeId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TaskStatusTypeId");

                    b.ToTable("TASK_STATUS", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TASK_STATUS_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("BillingDurationDays")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BillingMultiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StepId")
                        .HasColumnType("text");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StepId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("TASK_STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompletedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ParentTodoItemId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("ParentTodoItemId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskId", "SortOrder");

                    b.ToTable("TASK_TODO_ITEM", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultEstimatedDays")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresDeployment")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresTesting")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TASK_TYPE", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTypeStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultDepartmentId")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultDurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDepartmentId");

                    b.HasIndex("StepId");

                    b.HasIndex("TaskTypeId", "SortOrder");

                    b.ToTable("TASK_TYPE_STEP", (string)null);
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Activity.ActivityStatus", "ActivityStatus")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Activities")
                        .HasForeignKey("CustomerLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("Activities")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStep", "TaskStep")
                        .WithMany("Activities")
                        .HasForeignKey("TaskStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActivityStatus");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Location");

                    b.Navigation("Task");

                    b.Navigation("TaskStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Attendance.AttendanceSession", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", "CheckInLocation")
                        .WithMany()
                        .HasForeignKey("CheckInLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", "CheckOutLocation")
                        .WithMany()
                        .HasForeignKey("CheckOutLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", null)
                        .WithMany("CheckInSessions")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("AttendanceSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CheckInLocation");

                    b.Navigation("CheckOutLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", null)
                        .WithMany("CustomerLocations")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "DirectManager")
                        .WithMany("Subordinates")
                        .HasForeignKey("DirectManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", null)
                        .WithMany("Users")
                        .HasForeignKey("LocationId");

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("DirectManager");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Notification.NotificationM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("Notificatios")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "ProjectManager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId");

                    b.Navigation("Customer");

                    b.Navigation("Priority");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectTeamMember", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId");

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectRole", "ProjectRole")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectRoleId");

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Department", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Location", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Position", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.PositionLevel", "PositionLevel")
                        .WithMany("Positions")
                        .HasForeignKey("PositionLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("PositionLevel");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CreatedByUser")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Customer.CustomerM", "Customer")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "MainResponsibleUser")
                        .WithMany("MainResponsibleTasks")
                        .HasForeignKey("MainResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Project.ProjectM", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("MainResponsibleUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatusType", "TaskStatusType")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("TaskStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TaskStatusType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "AssignedUser")
                        .WithMany("AssignedTaskSteps")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Step", "Step")
                        .WithMany("TaskSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedUser");

                    b.Navigation("Department");

                    b.Navigation("Step");

                    b.Navigation("Task");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.HumanResources.User", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskTodoItem", "ParentTodoItem")
                        .WithMany("SubTodoItems")
                        .HasForeignKey("ParentTodoItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Priority", "Priority")
                        .WithMany("TodoItems")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskM", "Task")
                        .WithMany("TodoItems")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedUser");

                    b.Navigation("CompletedByUser");

                    b.Navigation("ParentTodoItem");

                    b.Navigation("Priority");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTypeStep", b =>
                {
                    b.HasOne("SoftPmo.Domain.Entities.SystemBase.Department", "DefaultDepartment")
                        .WithMany()
                        .HasForeignKey("DefaultDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoftPmo.Domain.Entities.Task.Step", "Step")
                        .WithMany("TaskTypeSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SoftPmo.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany("TaskTypeSteps")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultDepartment");

                    b.Navigation("Step");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Activity.ActivityStatus", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Customer.CustomerM", b =>
                {
                    b.Navigation("CustomerLocations");

                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.HumanResources.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AssignedTaskSteps");

                    b.Navigation("AttendanceSessions");

                    b.Navigation("CreatedTasks");

                    b.Navigation("MainResponsibleTasks");

                    b.Navigation("ManagedProjects");

                    b.Navigation("Notificatios");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectM", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectRole", b =>
                {
                    b.Navigation("ProjectTeamMembers");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Project.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Department", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("SubDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Location", b =>
                {
                    b.Navigation("CheckInSessions");

                    b.Navigation("CustomerLocations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.SystemBase.PositionLevel", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Priority", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.Step", b =>
                {
                    b.Navigation("TaskSteps");

                    b.Navigation("TaskTypeSteps");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskM", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("TaskSteps");

                    b.Navigation("TodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Navigation("TaskSteps");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStatusType", b =>
                {
                    b.Navigation("TaskStatuses");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskStep", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskTodoItem", b =>
                {
                    b.Navigation("SubTodoItems");
                });

            modelBuilder.Entity("SoftPmo.Domain.Entities.Task.TaskType", b =>
                {
                    b.Navigation("TaskTypeSteps");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
